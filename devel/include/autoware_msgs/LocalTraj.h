// Generated by gencpp from file autoware_msgs/LocalTraj.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MSGS_MESSAGE_LOCALTRAJ_H
#define AUTOWARE_MSGS_MESSAGE_LOCALTRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_msgs
{
template <class ContainerAllocator>
struct LocalTraj_
{
  typedef LocalTraj_<ContainerAllocator> Type;

  LocalTraj_()
    : x()
    , y()
    , psi()
    , curvature()
    , ref_vel()  {
    }
  LocalTraj_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , psi(_alloc)
    , curvature(_alloc)
    , ref_vel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  _y_type y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _psi_type;
  _psi_type psi;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _curvature_type;
  _curvature_type curvature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ref_vel_type;
  _ref_vel_type ref_vel;





  typedef boost::shared_ptr< ::autoware_msgs::LocalTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_msgs::LocalTraj_<ContainerAllocator> const> ConstPtr;

}; // struct LocalTraj_

typedef ::autoware_msgs::LocalTraj_<std::allocator<void> > LocalTraj;

typedef boost::shared_ptr< ::autoware_msgs::LocalTraj > LocalTrajPtr;
typedef boost::shared_ptr< ::autoware_msgs::LocalTraj const> LocalTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_msgs::LocalTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_msgs::LocalTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_msgs::LocalTraj_<ContainerAllocator1> & lhs, const ::autoware_msgs::LocalTraj_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.psi == rhs.psi &&
    lhs.curvature == rhs.curvature &&
    lhs.ref_vel == rhs.ref_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_msgs::LocalTraj_<ContainerAllocator1> & lhs, const ::autoware_msgs::LocalTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::LocalTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::LocalTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::LocalTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ace80ff02ea0c77ad6a0d54fec1e4a6";
  }

  static const char* value(const ::autoware_msgs::LocalTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ace80ff02ea0c77ULL;
  static const uint64_t static_value2 = 0xad6a0d54fec1e4a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_msgs/LocalTraj";
  }

  static const char* value(const ::autoware_msgs::LocalTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] x\n"
"float64[] y\n"
"float64[] psi\n"
"float64[] curvature\n"
"float64[] ref_vel\n"
;
  }

  static const char* value(const ::autoware_msgs::LocalTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.psi);
      stream.next(m.curvature);
      stream.next(m.ref_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_msgs::LocalTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_msgs::LocalTraj_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "psi[]" << std::endl;
    for (size_t i = 0; i < v.psi.size(); ++i)
    {
      s << indent << "  psi[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.psi[i]);
    }
    s << indent << "curvature[]" << std::endl;
    for (size_t i = 0; i < v.curvature.size(); ++i)
    {
      s << indent << "  curvature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.curvature[i]);
    }
    s << indent << "ref_vel[]" << std::endl;
    for (size_t i = 0; i < v.ref_vel.size(); ++i)
    {
      s << indent << "  ref_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ref_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MSGS_MESSAGE_LOCALTRAJ_H
