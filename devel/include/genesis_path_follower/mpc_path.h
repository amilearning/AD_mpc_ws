// Generated by gencpp from file genesis_path_follower/mpc_path.msg
// DO NOT EDIT!


#ifndef GENESIS_PATH_FOLLOWER_MESSAGE_MPC_PATH_H
#define GENESIS_PATH_FOLLOWER_MESSAGE_MPC_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace genesis_path_follower
{
template <class ContainerAllocator>
struct mpc_path_
{
  typedef mpc_path_<ContainerAllocator> Type;

  mpc_path_()
    : header()
    , solve_status()
    , solve_time(0.0)
    , xs()
    , ys()
    , vs()
    , psis()
    , xr()
    , yr()
    , vr()
    , psir()
    , df()
    , acc()
    , ss()
    , eys()
    , epsis()
    , crf()
    , vrf(0.0)  {
    }
  mpc_path_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , solve_status(_alloc)
    , solve_time(0.0)
    , xs(_alloc)
    , ys(_alloc)
    , vs(_alloc)
    , psis(_alloc)
    , xr(_alloc)
    , yr(_alloc)
    , vr(_alloc)
    , psir(_alloc)
    , df(_alloc)
    , acc(_alloc)
    , ss(_alloc)
    , eys(_alloc)
    , epsis(_alloc)
    , crf(_alloc)
    , vrf(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _solve_status_type;
  _solve_status_type solve_status;

   typedef double _solve_time_type;
  _solve_time_type solve_time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xs_type;
  _xs_type xs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ys_type;
  _ys_type ys;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vs_type;
  _vs_type vs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _psis_type;
  _psis_type psis;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xr_type;
  _xr_type xr;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yr_type;
  _yr_type yr;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vr_type;
  _vr_type vr;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _psir_type;
  _psir_type psir;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _df_type;
  _df_type df;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acc_type;
  _acc_type acc;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ss_type;
  _ss_type ss;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eys_type;
  _eys_type eys;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _epsis_type;
  _epsis_type epsis;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _crf_type;
  _crf_type crf;

   typedef double _vrf_type;
  _vrf_type vrf;





  typedef boost::shared_ptr< ::genesis_path_follower::mpc_path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::genesis_path_follower::mpc_path_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_path_

typedef ::genesis_path_follower::mpc_path_<std::allocator<void> > mpc_path;

typedef boost::shared_ptr< ::genesis_path_follower::mpc_path > mpc_pathPtr;
typedef boost::shared_ptr< ::genesis_path_follower::mpc_path const> mpc_pathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::genesis_path_follower::mpc_path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::genesis_path_follower::mpc_path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::genesis_path_follower::mpc_path_<ContainerAllocator1> & lhs, const ::genesis_path_follower::mpc_path_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.solve_status == rhs.solve_status &&
    lhs.solve_time == rhs.solve_time &&
    lhs.xs == rhs.xs &&
    lhs.ys == rhs.ys &&
    lhs.vs == rhs.vs &&
    lhs.psis == rhs.psis &&
    lhs.xr == rhs.xr &&
    lhs.yr == rhs.yr &&
    lhs.vr == rhs.vr &&
    lhs.psir == rhs.psir &&
    lhs.df == rhs.df &&
    lhs.acc == rhs.acc &&
    lhs.ss == rhs.ss &&
    lhs.eys == rhs.eys &&
    lhs.epsis == rhs.epsis &&
    lhs.crf == rhs.crf &&
    lhs.vrf == rhs.vrf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::genesis_path_follower::mpc_path_<ContainerAllocator1> & lhs, const ::genesis_path_follower::mpc_path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace genesis_path_follower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::genesis_path_follower::mpc_path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_path_follower::mpc_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_path_follower::mpc_path_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5cdd34d6da3208a35233bde8022e4d2";
  }

  static const char* value(const ::genesis_path_follower::mpc_path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5cdd34d6da3208aULL;
  static const uint64_t static_value2 = 0x35233bde8022e4d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "genesis_path_follower/mpc_path";
  }

  static const char* value(const ::genesis_path_follower::mpc_path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string solve_status # e.g. optimal, infeasible, etc.\n"
"float64 solve_time  # time used to solve the optimization problem in seconds\n"
"float64[] xs        # MPC solution for x coordinate (m)\n"
"float64[] ys        # MPC solution for y coordinate (m)\n"
"float64[] vs        # MPC solution for speed (m/s)\n"
"float64[] psis      # MPC solution for yaw angle (rad)\n"
"float64[] xr        # MPC reference for \"\"\n"
"float64[] yr        # MPC reference for \"\"\n"
"float64[] vr        # MPC reference for \"\"\n"
"float64[] psir      # MPC reference for \"\"\n"
"float64[] df        # MPC solution for front steering angle (rad)\n"
"float64[] acc       # MPC solution for acceleration (m/s^2)\n"
"\n"
"float64[] ss        # MPC solution for Frenet s (m)\n"
"float64[] eys       # MPC solution for Frenet ey (m)\n"
"float64[] epsis     # MPC solution for Frenet epsi (m)\n"
"\n"
"float64[] crf       # curvature reference profile for Frenet (rad/m)\n"
"float64 vrf         # curvature-aware velocity reference for Frenet (m/s)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::genesis_path_follower::mpc_path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.solve_status);
      stream.next(m.solve_time);
      stream.next(m.xs);
      stream.next(m.ys);
      stream.next(m.vs);
      stream.next(m.psis);
      stream.next(m.xr);
      stream.next(m.yr);
      stream.next(m.vr);
      stream.next(m.psir);
      stream.next(m.df);
      stream.next(m.acc);
      stream.next(m.ss);
      stream.next(m.eys);
      stream.next(m.epsis);
      stream.next(m.crf);
      stream.next(m.vrf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::genesis_path_follower::mpc_path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::genesis_path_follower::mpc_path_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "solve_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.solve_status);
    s << indent << "solve_time: ";
    Printer<double>::stream(s, indent + "  ", v.solve_time);
    s << indent << "xs[]" << std::endl;
    for (size_t i = 0; i < v.xs.size(); ++i)
    {
      s << indent << "  xs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xs[i]);
    }
    s << indent << "ys[]" << std::endl;
    for (size_t i = 0; i < v.ys.size(); ++i)
    {
      s << indent << "  ys[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ys[i]);
    }
    s << indent << "vs[]" << std::endl;
    for (size_t i = 0; i < v.vs.size(); ++i)
    {
      s << indent << "  vs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vs[i]);
    }
    s << indent << "psis[]" << std::endl;
    for (size_t i = 0; i < v.psis.size(); ++i)
    {
      s << indent << "  psis[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.psis[i]);
    }
    s << indent << "xr[]" << std::endl;
    for (size_t i = 0; i < v.xr.size(); ++i)
    {
      s << indent << "  xr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xr[i]);
    }
    s << indent << "yr[]" << std::endl;
    for (size_t i = 0; i < v.yr.size(); ++i)
    {
      s << indent << "  yr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yr[i]);
    }
    s << indent << "vr[]" << std::endl;
    for (size_t i = 0; i < v.vr.size(); ++i)
    {
      s << indent << "  vr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vr[i]);
    }
    s << indent << "psir[]" << std::endl;
    for (size_t i = 0; i < v.psir.size(); ++i)
    {
      s << indent << "  psir[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.psir[i]);
    }
    s << indent << "df[]" << std::endl;
    for (size_t i = 0; i < v.df.size(); ++i)
    {
      s << indent << "  df[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.df[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "ss[]" << std::endl;
    for (size_t i = 0; i < v.ss.size(); ++i)
    {
      s << indent << "  ss[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ss[i]);
    }
    s << indent << "eys[]" << std::endl;
    for (size_t i = 0; i < v.eys.size(); ++i)
    {
      s << indent << "  eys[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eys[i]);
    }
    s << indent << "epsis[]" << std::endl;
    for (size_t i = 0; i < v.epsis.size(); ++i)
    {
      s << indent << "  epsis[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.epsis[i]);
    }
    s << indent << "crf[]" << std::endl;
    for (size_t i = 0; i < v.crf.size(); ++i)
    {
      s << indent << "  crf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.crf[i]);
    }
    s << indent << "vrf: ";
    Printer<double>::stream(s, indent + "  ", v.vrf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENESIS_PATH_FOLLOWER_MESSAGE_MPC_PATH_H
