// Generated by gencpp from file genesis_msgs/MandoObjectReport.msg
// DO NOT EDIT!


#ifndef GENESIS_MSGS_MESSAGE_MANDOOBJECTREPORT_H
#define GENESIS_MSGS_MESSAGE_MANDOOBJECTREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace genesis_msgs
{
template <class ContainerAllocator>
struct MandoObjectReport_
{
  typedef MandoObjectReport_<ContainerAllocator> Type;

  MandoObjectReport_()
    : header()
    , index()
    , alive_count_a()
    , object_identifier()
    , object_age()
    , object_valid()
    , object_mode()
    , object_lane()
    , angle_rate()
    , angle_left()
    , angle_right()
    , cipv()
    , brake_lights()
    , blinker_info()
    , alive_count_b()
    , range()
    , range_rate()
    , motion_status()
    , accel_x()
    , position_y()  {
    }
  MandoObjectReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , index(_alloc)
    , alive_count_a(_alloc)
    , object_identifier(_alloc)
    , object_age(_alloc)
    , object_valid(_alloc)
    , object_mode(_alloc)
    , object_lane(_alloc)
    , angle_rate(_alloc)
    , angle_left(_alloc)
    , angle_right(_alloc)
    , cipv(_alloc)
    , brake_lights(_alloc)
    , blinker_info(_alloc)
    , alive_count_b(_alloc)
    , range(_alloc)
    , range_rate(_alloc)
    , motion_status(_alloc)
    , accel_x(_alloc)
    , position_y(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _index_type;
  _index_type index;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _alive_count_a_type;
  _alive_count_a_type alive_count_a;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_identifier_type;
  _object_identifier_type object_identifier;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_age_type;
  _object_age_type object_age;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_valid_type;
  _object_valid_type object_valid;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_mode_type;
  _object_mode_type object_mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_lane_type;
  _object_lane_type object_lane;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_rate_type;
  _angle_rate_type angle_rate;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_left_type;
  _angle_left_type angle_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_right_type;
  _angle_right_type angle_right;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cipv_type;
  _cipv_type cipv;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _brake_lights_type;
  _brake_lights_type brake_lights;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _blinker_info_type;
  _blinker_info_type blinker_info;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _alive_count_b_type;
  _alive_count_b_type alive_count_b;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_type;
  _range_type range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_rate_type;
  _range_rate_type range_rate;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motion_status_type;
  _motion_status_type motion_status;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _accel_x_type;
  _accel_x_type accel_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _position_y_type;
  _position_y_type position_y;





  typedef boost::shared_ptr< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> const> ConstPtr;

}; // struct MandoObjectReport_

typedef ::genesis_msgs::MandoObjectReport_<std::allocator<void> > MandoObjectReport;

typedef boost::shared_ptr< ::genesis_msgs::MandoObjectReport > MandoObjectReportPtr;
typedef boost::shared_ptr< ::genesis_msgs::MandoObjectReport const> MandoObjectReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::genesis_msgs::MandoObjectReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::genesis_msgs::MandoObjectReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::MandoObjectReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.index == rhs.index &&
    lhs.alive_count_a == rhs.alive_count_a &&
    lhs.object_identifier == rhs.object_identifier &&
    lhs.object_age == rhs.object_age &&
    lhs.object_valid == rhs.object_valid &&
    lhs.object_mode == rhs.object_mode &&
    lhs.object_lane == rhs.object_lane &&
    lhs.angle_rate == rhs.angle_rate &&
    lhs.angle_left == rhs.angle_left &&
    lhs.angle_right == rhs.angle_right &&
    lhs.cipv == rhs.cipv &&
    lhs.brake_lights == rhs.brake_lights &&
    lhs.blinker_info == rhs.blinker_info &&
    lhs.alive_count_b == rhs.alive_count_b &&
    lhs.range == rhs.range &&
    lhs.range_rate == rhs.range_rate &&
    lhs.motion_status == rhs.motion_status &&
    lhs.accel_x == rhs.accel_x &&
    lhs.position_y == rhs.position_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::genesis_msgs::MandoObjectReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::MandoObjectReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace genesis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f997b467cbc16144eb262d8e6a2bc7c";
  }

  static const char* value(const ::genesis_msgs::MandoObjectReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f997b467cbc1614ULL;
  static const uint64_t static_value2 = 0x4eb262d8e6a2bc7cULL;
};

template<class ContainerAllocator>
struct DataType< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "genesis_msgs/MandoObjectReport";
  }

  static const char* value(const ::genesis_msgs::MandoObjectReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32[] index\n"
"\n"
"int32[] alive_count_a \n"
"int32[] object_identifier\n"
"int32[] object_age\n"
"int32[] object_valid			# valid(1) or invalid (0)\n"
"int32[] object_mode			# cutout (2), cutin (1), neither(0)\n"
"int32[] object_lane			# same lane (0), next left (1), far left (2), near right (3), far right (4), unknown (5)\n"
"float32[] angle_rate			# deg\n"
"float32[] angle_left			# deg\n"
"float32[] angle_right			# deg\n"
"int32[] cipv				# cipv = closest in path vehicle(1) or not (0)\n"
"int32[] brake_lights			# on (1), off or N/A (0)\n"
"int32[] blinker_info			# both(4), right(3), left(2), off(0)\n"
"\n"
"int32[] alive_count_b\n"
"float32[] range				# m\n"
"float32[] range_rate			# m/s\n"
"int32[] motion_status			# stationary (4), stopped(3), oncoming (2), preceding(1), undecided(0)\n"
"float32[] accel_x			# m/s^2\n"
"float32[] position_y			# m\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::genesis_msgs::MandoObjectReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.index);
      stream.next(m.alive_count_a);
      stream.next(m.object_identifier);
      stream.next(m.object_age);
      stream.next(m.object_valid);
      stream.next(m.object_mode);
      stream.next(m.object_lane);
      stream.next(m.angle_rate);
      stream.next(m.angle_left);
      stream.next(m.angle_right);
      stream.next(m.cipv);
      stream.next(m.brake_lights);
      stream.next(m.blinker_info);
      stream.next(m.alive_count_b);
      stream.next(m.range);
      stream.next(m.range_rate);
      stream.next(m.motion_status);
      stream.next(m.accel_x);
      stream.next(m.position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MandoObjectReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::genesis_msgs::MandoObjectReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::genesis_msgs::MandoObjectReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "alive_count_a[]" << std::endl;
    for (size_t i = 0; i < v.alive_count_a.size(); ++i)
    {
      s << indent << "  alive_count_a[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.alive_count_a[i]);
    }
    s << indent << "object_identifier[]" << std::endl;
    for (size_t i = 0; i < v.object_identifier.size(); ++i)
    {
      s << indent << "  object_identifier[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_identifier[i]);
    }
    s << indent << "object_age[]" << std::endl;
    for (size_t i = 0; i < v.object_age.size(); ++i)
    {
      s << indent << "  object_age[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_age[i]);
    }
    s << indent << "object_valid[]" << std::endl;
    for (size_t i = 0; i < v.object_valid.size(); ++i)
    {
      s << indent << "  object_valid[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_valid[i]);
    }
    s << indent << "object_mode[]" << std::endl;
    for (size_t i = 0; i < v.object_mode.size(); ++i)
    {
      s << indent << "  object_mode[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_mode[i]);
    }
    s << indent << "object_lane[]" << std::endl;
    for (size_t i = 0; i < v.object_lane.size(); ++i)
    {
      s << indent << "  object_lane[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_lane[i]);
    }
    s << indent << "angle_rate[]" << std::endl;
    for (size_t i = 0; i < v.angle_rate.size(); ++i)
    {
      s << indent << "  angle_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle_rate[i]);
    }
    s << indent << "angle_left[]" << std::endl;
    for (size_t i = 0; i < v.angle_left.size(); ++i)
    {
      s << indent << "  angle_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle_left[i]);
    }
    s << indent << "angle_right[]" << std::endl;
    for (size_t i = 0; i < v.angle_right.size(); ++i)
    {
      s << indent << "  angle_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle_right[i]);
    }
    s << indent << "cipv[]" << std::endl;
    for (size_t i = 0; i < v.cipv.size(); ++i)
    {
      s << indent << "  cipv[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cipv[i]);
    }
    s << indent << "brake_lights[]" << std::endl;
    for (size_t i = 0; i < v.brake_lights.size(); ++i)
    {
      s << indent << "  brake_lights[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.brake_lights[i]);
    }
    s << indent << "blinker_info[]" << std::endl;
    for (size_t i = 0; i < v.blinker_info.size(); ++i)
    {
      s << indent << "  blinker_info[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.blinker_info[i]);
    }
    s << indent << "alive_count_b[]" << std::endl;
    for (size_t i = 0; i < v.alive_count_b.size(); ++i)
    {
      s << indent << "  alive_count_b[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.alive_count_b[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "range_rate[]" << std::endl;
    for (size_t i = 0; i < v.range_rate.size(); ++i)
    {
      s << indent << "  range_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range_rate[i]);
    }
    s << indent << "motion_status[]" << std::endl;
    for (size_t i = 0; i < v.motion_status.size(); ++i)
    {
      s << indent << "  motion_status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motion_status[i]);
    }
    s << indent << "accel_x[]" << std::endl;
    for (size_t i = 0; i < v.accel_x.size(); ++i)
    {
      s << indent << "  accel_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel_x[i]);
    }
    s << indent << "position_y[]" << std::endl;
    for (size_t i = 0; i < v.position_y.size(); ++i)
    {
      s << indent << "  position_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENESIS_MSGS_MESSAGE_MANDOOBJECTREPORT_H
