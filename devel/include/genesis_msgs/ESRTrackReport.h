// Generated by gencpp from file genesis_msgs/ESRTrackReport.msg
// DO NOT EDIT!


#ifndef GENESIS_MSGS_MESSAGE_ESRTRACKREPORT_H
#define GENESIS_MSGS_MESSAGE_ESRTRACKREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace genesis_msgs
{
template <class ContainerAllocator>
struct ESRTrackReport_
{
  typedef ESRTrackReport_<ContainerAllocator> Type;

  ESRTrackReport_()
    : header()
    , grouping_changed()
    , oncoming()
    , bridge_object()
    , status()
    , rolling_count()
    , mode()
    , range()
    , range_rate()
    , range_accel()
    , width()
    , angle()
    , lat_rate()  {
    }
  ESRTrackReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , grouping_changed(_alloc)
    , oncoming(_alloc)
    , bridge_object(_alloc)
    , status(_alloc)
    , rolling_count(_alloc)
    , mode(_alloc)
    , range(_alloc)
    , range_rate(_alloc)
    , range_accel(_alloc)
    , width(_alloc)
    , angle(_alloc)
    , lat_rate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _grouping_changed_type;
  _grouping_changed_type grouping_changed;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _oncoming_type;
  _oncoming_type oncoming;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _bridge_object_type;
  _bridge_object_type bridge_object;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _status_type;
  _status_type status;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _rolling_count_type;
  _rolling_count_type rolling_count;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _mode_type;
  _mode_type mode;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_type;
  _range_type range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_rate_type;
  _range_rate_type range_rate;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_accel_type;
  _range_accel_type range_accel;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _width_type;
  _width_type width;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_type;
  _angle_type angle;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lat_rate_type;
  _lat_rate_type lat_rate;





  typedef boost::shared_ptr< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> const> ConstPtr;

}; // struct ESRTrackReport_

typedef ::genesis_msgs::ESRTrackReport_<std::allocator<void> > ESRTrackReport;

typedef boost::shared_ptr< ::genesis_msgs::ESRTrackReport > ESRTrackReportPtr;
typedef boost::shared_ptr< ::genesis_msgs::ESRTrackReport const> ESRTrackReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::genesis_msgs::ESRTrackReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::genesis_msgs::ESRTrackReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::ESRTrackReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.grouping_changed == rhs.grouping_changed &&
    lhs.oncoming == rhs.oncoming &&
    lhs.bridge_object == rhs.bridge_object &&
    lhs.status == rhs.status &&
    lhs.rolling_count == rhs.rolling_count &&
    lhs.mode == rhs.mode &&
    lhs.range == rhs.range &&
    lhs.range_rate == rhs.range_rate &&
    lhs.range_accel == rhs.range_accel &&
    lhs.width == rhs.width &&
    lhs.angle == rhs.angle &&
    lhs.lat_rate == rhs.lat_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::genesis_msgs::ESRTrackReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::ESRTrackReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace genesis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd50ae5f4f5173c868d1c9edbd613a3f";
  }

  static const char* value(const ::genesis_msgs::ESRTrackReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd50ae5f4f5173c8ULL;
  static const uint64_t static_value2 = 0x68d1c9edbd613a3fULL;
};

template<class ContainerAllocator>
struct DataType< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "genesis_msgs/ESRTrackReport";
  }

  static const char* value(const ::genesis_msgs::ESRTrackReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# STATUS/MODE RELATED\n"
"int32[] grouping_changed      # changed (1), unchanged(0)\n"
"int32[] oncoming              # oncoming (1), not oncoming (0)\n"
"int32[] bridge_object         # bridge (1), not bridge (0)\n"
"int32[] status                # New_Coasted_Target(7), Invalid_Coasted_Target(6), Merged_Target(5), Coasted_Target(4), \n"
"                            # Updated_Target(3), New_Updated_Target(2), New_Target(1), No_Target(0)\n"
"int32[] rolling_count         # ?\n"
"int32[] mode                  # both MR/LR (3), LR(2), MR(1), Neither (0)\n"
"\n"
"# MEASUREMENTS\n"
"float32[] range               # m\n"
"float32[] range_rate          # m/s\n"
"float32[] range_accel         # m/s^2\n"
"float32[] width               # m\n"
"float32[] angle               # deg\n"
"float32[] lat_rate            # ?\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::genesis_msgs::ESRTrackReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.grouping_changed);
      stream.next(m.oncoming);
      stream.next(m.bridge_object);
      stream.next(m.status);
      stream.next(m.rolling_count);
      stream.next(m.mode);
      stream.next(m.range);
      stream.next(m.range_rate);
      stream.next(m.range_accel);
      stream.next(m.width);
      stream.next(m.angle);
      stream.next(m.lat_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESRTrackReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::genesis_msgs::ESRTrackReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::genesis_msgs::ESRTrackReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "grouping_changed[]" << std::endl;
    for (size_t i = 0; i < v.grouping_changed.size(); ++i)
    {
      s << indent << "  grouping_changed[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.grouping_changed[i]);
    }
    s << indent << "oncoming[]" << std::endl;
    for (size_t i = 0; i < v.oncoming.size(); ++i)
    {
      s << indent << "  oncoming[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.oncoming[i]);
    }
    s << indent << "bridge_object[]" << std::endl;
    for (size_t i = 0; i < v.bridge_object.size(); ++i)
    {
      s << indent << "  bridge_object[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.bridge_object[i]);
    }
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "rolling_count[]" << std::endl;
    for (size_t i = 0; i < v.rolling_count.size(); ++i)
    {
      s << indent << "  rolling_count[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rolling_count[i]);
    }
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "range_rate[]" << std::endl;
    for (size_t i = 0; i < v.range_rate.size(); ++i)
    {
      s << indent << "  range_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range_rate[i]);
    }
    s << indent << "range_accel[]" << std::endl;
    for (size_t i = 0; i < v.range_accel.size(); ++i)
    {
      s << indent << "  range_accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range_accel[i]);
    }
    s << indent << "width[]" << std::endl;
    for (size_t i = 0; i < v.width.size(); ++i)
    {
      s << indent << "  width[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.width[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "lat_rate[]" << std::endl;
    for (size_t i = 0; i < v.lat_rate.size(); ++i)
    {
      s << indent << "  lat_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lat_rate[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENESIS_MSGS_MESSAGE_ESRTRACKREPORT_H
