// Generated by gencpp from file genesis_msgs/LaneReport.msg
// DO NOT EDIT!


#ifndef GENESIS_MSGS_MESSAGE_LANEREPORT_H
#define GENESIS_MSGS_MESSAGE_LANEREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace genesis_msgs
{
template <class ContainerAllocator>
struct LaneReport_
{
  typedef LaneReport_<ContainerAllocator> Type;

  LaneReport_()
    : header()
    , stampA()
    , stampB()
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , lane_mark_type(0)
    , lane_mark_quality(0)  {
    }
  LaneReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stampA()
    , stampB()
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , lane_mark_type(0)
    , lane_mark_quality(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _stampA_type;
  _stampA_type stampA;

   typedef ros::Time _stampB_type;
  _stampB_type stampB;

   typedef float _a0_type;
  _a0_type a0;

   typedef float _a1_type;
  _a1_type a1;

   typedef float _a2_type;
  _a2_type a2;

   typedef float _a3_type;
  _a3_type a3;

   typedef int32_t _lane_mark_type_type;
  _lane_mark_type_type lane_mark_type;

   typedef int32_t _lane_mark_quality_type;
  _lane_mark_quality_type lane_mark_quality;





  typedef boost::shared_ptr< ::genesis_msgs::LaneReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::genesis_msgs::LaneReport_<ContainerAllocator> const> ConstPtr;

}; // struct LaneReport_

typedef ::genesis_msgs::LaneReport_<std::allocator<void> > LaneReport;

typedef boost::shared_ptr< ::genesis_msgs::LaneReport > LaneReportPtr;
typedef boost::shared_ptr< ::genesis_msgs::LaneReport const> LaneReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::genesis_msgs::LaneReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::genesis_msgs::LaneReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::genesis_msgs::LaneReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::LaneReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.stampA == rhs.stampA &&
    lhs.stampB == rhs.stampB &&
    lhs.a0 == rhs.a0 &&
    lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3 &&
    lhs.lane_mark_type == rhs.lane_mark_type &&
    lhs.lane_mark_quality == rhs.lane_mark_quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::genesis_msgs::LaneReport_<ContainerAllocator1> & lhs, const ::genesis_msgs::LaneReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace genesis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::LaneReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::genesis_msgs::LaneReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::LaneReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::genesis_msgs::LaneReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::LaneReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::genesis_msgs::LaneReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::genesis_msgs::LaneReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38b4f1a74aa95aed2e054915f544383c";
  }

  static const char* value(const ::genesis_msgs::LaneReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38b4f1a74aa95aedULL;
  static const uint64_t static_value2 = 0x2e054915f544383cULL;
};

template<class ContainerAllocator>
struct DataType< ::genesis_msgs::LaneReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "genesis_msgs/LaneReport";
  }

  static const char* value(const ::genesis_msgs::LaneReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::genesis_msgs::LaneReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"time stampA					# timestamp for the \"A\"-part of the message; same as header.stamp\n"
"time stampB					# timestamp for the \"B\"-part of the message\n"
"\n"
"# Lane polynomial in vehicle frame is y = a0 + a1 x + a2 x^2 + a3 x^3\n"
"float32 a0\n"
"float32 a1\n"
"float32 a2\n"
"float32 a3\n"
"\n"
"# Mark types: 6 \"Invalid\" 5 \"Botts'Dots\" 4 \"DoubleLaneMark\" 3 \"RoadEdge\" 2 \"Undecided\" 1 \"Solid\" 0 \"Dashed\" ;\n"
"int32 lane_mark_type\n"
"# Quality types: 0, 1 \"Low Quality\" 2, 3 \"High Quality\"\n"
"int32 lane_mark_quality\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::genesis_msgs::LaneReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::genesis_msgs::LaneReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stampA);
      stream.next(m.stampB);
      stream.next(m.a0);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.lane_mark_type);
      stream.next(m.lane_mark_quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::genesis_msgs::LaneReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::genesis_msgs::LaneReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stampA: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stampA);
    s << indent << "stampB: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stampB);
    s << indent << "a0: ";
    Printer<float>::stream(s, indent + "  ", v.a0);
    s << indent << "a1: ";
    Printer<float>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<float>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<float>::stream(s, indent + "  ", v.a3);
    s << indent << "lane_mark_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_mark_type);
    s << indent << "lane_mark_quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_mark_quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENESIS_MSGS_MESSAGE_LANEREPORT_H
